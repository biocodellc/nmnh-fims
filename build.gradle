buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "com.github.marceloemanoel:gradle-environments-plugin:0.1"
        classpath "org.hidetake:gradle-ssh-plugin:2.0.0"
    }
}

import groovy.io.FileType

apply plugin: "java"
apply plugin: "war"
apply plugin: "idea"
apply plugin: "environments"
apply plugin: "org.hidetake.ssh"

targetCompatibility = 1.7
sourceCompatibility = 1.7

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.glassfish.jersey.media:jersey-media-multipart:2.22.2'
//    compile 'org.glassfish.jersey.ext:jersey-mvc:2.22.2'
    compile 'commons-io:commons-io:2.4'
    compile 'org.apache.axis:axis-jaxrpc:1.4'
    compile 'org.apache.axis:axis:1.4'
    compile fileTree(dir: 'lib', include: ['*.jar'])
    compile project(":biocode-fims-commons")

    testCompile "junit:junit-dep:4.10"
}

webAppDirName = "src/main/web"
libsDirName = "../dist"

project.ext.environment = defaultEnvironment

clean {
    delete libsDir
}

// jetty ssh plugin
remotes {
    nmnh {
        host = 'biscicol.org' // TODO need to change this
        user = nmnhUser
        password = nmnhPassword
        // TODO: adding this line means stasks will fail, even though it is specified, for now, password specified above.
        //file("${System.getProperty('user.home')}/.ssh/id_rsa")
    }
}

allprojects {
    task verifyMasterBranch << {
        ext.repo = Grgit.open(project.file('.'))
        if (ext.repo.branch.current.name != "master")
            throw new GradleScriptException(project.name + ' is not on the master branch', null)
    }
}

task setProductionEnv << {
    project.ext.environment = "production"
}
task setDevelopmentEnv << {
    project.ext.environment = "development"
}
task setLocalEnv << {
    project.ext.environment = "local"
}

// if setProductionEnv or setDevelopmentEnv is run, make sure this is done before processResources
setProductionEnv.mustRunAfter compileJava
setDevelopmentEnv.mustRunAfter compileJava
setLocalEnv.mustRunAfter compileJava

/*
Delete any resource files in src/main/resources if the file exists in a sub directory
of src/main/environment, excluding the current environment setting directory
*/
task cleanResourceDirectory {
    doLast {
        def allResourceFilesToRemove = []

        def environmentDir = new File("src/main/environment")
        environmentDir.eachFileRecurse(FileType.FILES) { file ->
            allResourceFilesToRemove << file.name
        }

        allResourceFilesToRemove.each {
            def resourceFile = new File("src/main/resources/${it}")
            if (resourceFile.exists()) {
                resourceFile.delete()
            }
        }
    }
}

task copyEnvironmentResources {
    dependsOn cleanResourceDirectory
    doLast {
        project.copy {
            from "src/main/environment/${project.environment}"
            into "src/main/resources"
            include "**/*"
            exclude "web.xml"
            exclude ".gitkeep"
        }
    }
}
processResources.dependsOn copyEnvironmentResources

task copyWebXml {
    inputs.dir "src/main/environment/${project.environment}/web.xml"
    outputs.dir "src/main/web/WEB-INF"
    doLast {
        project.copy {
            from "src/main/environment/${project.environment}"
            into "src/main/web/WEB-INF"
            include "web.xml"
        }
    }
}

processResources.dependsOn copyWebXml

task deployFims {
    group = 'nmng'
    description = 'verify that all subprojects are on the master branch. Then build and copy war to nmnh production jetty webApp directory'

    dependsOn verifyMasterBranch
    dependsOn setProductionEnv
    dependsOn war

    doLast {
        ssh.run {
            session(remotes.nmnh) {
                put from: war.archivePath.path, into: remoteWarDirectory + "/fims.war"
            }
        }
    }
}

task deployFimsDev {
    group = 'nmnh'
    description = 'build and copy war to nmnh development jetty webApp directory'

    dependsOn setDevelopmentEnv
    dependsOn war

    doLast {
        ssh.run {
            session(remotes.nmnh) {
                put from: war.archivePath.path, into: remoteWarDevDirectory + "/fims.war"
            }
        }
    }
}

task deployFimsLocal  {
    description = 'local fims deployment'

    dependsOn setLocalEnv
    dependsOn war

    doLast {
        project.copy {
            from war.destinationDir
            into localWarDirectory
            include war.archiveName
            rename war.archiveName, "fims.war"
        }
    }
}
